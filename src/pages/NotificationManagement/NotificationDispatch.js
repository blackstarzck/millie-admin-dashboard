import React, { useState, useEffect } from 'react';
import {
    Form,
    Input,
    Select,
    Radio,
    DatePicker,
    Button,
    Space,
    Typography,
    message,
    Card,
    Divider,
    AutoComplete, // For user search
    Row,
    Col,
    Modal,
} from 'antd';
import {
    SendOutlined, // Î∞úÏÜ° ÏïÑÏù¥ÏΩò
    EyeOutlined, // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏïÑÏù¥ÏΩò
    MailOutlined,
    MessageOutlined,
    BellOutlined,
} from '@ant-design/icons';
import moment from 'moment';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;
const { TextArea } = Input;

// --- Sample Data (Replace with API calls) ---
const mockTemplates = [
    { key: 'tpl001', id: 'tpl001', name: 'ÌôòÏòÅ Î©îÏãúÏßÄ', title: 'ÌöåÏõêÍ∞ÄÏûÖÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!', content: '[Ïù¥Î¶Ñ]Îãò, Î∞ÄÎ¶¨Ïùò ÏÑúÏû¨Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§! ÏßÄÍ∏à Î∞îÎ°ú Ï≤´ Îã¨ Î¨¥Î£å ÌòúÌÉùÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.' },
    { key: 'tpl002', id: 'tpl002', name: 'Ïù¥Î≤§Ìä∏ ÏïàÎÇ¥ (Ïã†Í∞Ñ)', title: '[Ïã†Í∞Ñ Ï†úÎ™©] Ï∂úÍ∞Ñ Í∏∞ÎÖê Ïù¥Î≤§Ìä∏! ', content: 'ÎèÖÏûêÎãòÏùò Ï∑®Ìñ•ÏùÑ Ï†ÄÍ≤©Ìï† [Ïã†Í∞Ñ Ï†úÎ™©]Ïù¥ Ï∂úÍ∞ÑÎêòÏóàÏäµÎãàÎã§! ÏßÄÍ∏à Î∞îÎ°ú ÌäπÎ≥Ñ Ïù¥Î≤§Ìä∏Ïóê Ï∞∏Ïó¨ÌïòÍ≥† ÌòúÌÉùÏùÑ Î∞õÏïÑÍ∞ÄÏÑ∏Ïöî. [ÎßÅÌÅ¨]' },
    { key: 'tpl003', id: 'tpl003', name: 'ÎèÖÏÑú Î£®Ìã¥ ÏïåÎ¶º', title: 'Ïò§ÎäòÏùò ÎèÖÏÑú, ÏãúÏûëÌïòÏÖ®ÎÇòÏöî? üìö', content: '[Ïù¥Î¶Ñ]Îãò, Ïû†Ïãú Î∞ÄÎ¶¨Ïùò ÏÑúÏû¨ÏôÄ Ìï®Íªò ÎßàÏùåÏùò ÏñëÏãùÏùÑ ÏåìÏïÑÎ≥¥Îäî Í±¥ Ïñ¥ÎïåÏöî? Íæ∏Ï§ÄÌïú ÎèÖÏÑúÎäî ÏÑ±Ïû•Ïùò Î∞ëÍ±∞Î¶ÑÏù¥ Îê©ÎãàÎã§.' },
];

const mockUserGroups = [
    { key: 'G001', name: 'VIP Í≥†Í∞ù' },
    { key: 'G002', name: 'Ïã†Í∑ú Í∞ÄÏûÖ (30Ïùº Ïù¥ÎÇ¥)' },
    { key: 'G003', name: 'Ïù¥Î≤§Ìä∏ Ï∞∏Ïó¨Ïûê (7Ïõî)' },
];

const mockUsers = [
    { value: 'user001', label: 'ÍπÄÎØºÏßÄ (user001@example.com)' },
    { value: 'user002', label: 'Ïù¥ÏàòÌòÑ (suhyun.lee@example.com)' },
    { value: 'user003', label: 'Î∞ïÏÑúÏ§Ä (seo.park@example.com)' },
    { value: 'user004', label: 'ÏµúÏú†ÎÇò (yuna.choi@sample.net)' },
];

// --- Component ---
const NotificationDispatch = () => {
    const [form] = Form.useForm();
    const [targetType, setTargetType] = useState('all'); // all, group, individual
    const [dispatchTime, setDispatchTime] = useState('immediate'); // immediate, scheduled
    const [userSearchOptions, setUserSearchOptions] = useState([]);
    const [previewVisible, setPreviewVisible] = useState(false);
    const [previewData, setPreviewData] = useState({});

    // Load template when selected
    const handleTemplateChange = (templateId) => {
        const selectedTemplate = mockTemplates.find(t => t.id === templateId);
        if (selectedTemplate) {
            form.setFieldsValue({
                title: selectedTemplate.title,
                content: selectedTemplate.content,
            });
        } else {
            // Clear fields if "Direct Input" is selected
            form.setFieldsValue({ title: '', content: '' });
        }
    };

    // Handle user search for AutoComplete
    const handleUserSearch = (searchText) => {
        if (!searchText) {
            setUserSearchOptions([]);
        } else {
            // Simulate API call or filter mockUsers
            setUserSearchOptions(
                mockUsers.filter(user =>
                    user.label.toLowerCase().includes(searchText.toLowerCase())
                )
            );
        }
    };

    // Show preview
    const showPreview = () => {
        form.validateFields()
            .then(values => {
                setPreviewData(values);
                setPreviewVisible(true);
            })
            .catch(info => {
                console.log('Validate Failed for Preview:', info);
                message.warning('ÎØ∏Î¶¨Î≥¥Í∏∞Î•º ÏúÑÌï¥ ÌïÑÏàò Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            });
    };

    // Handle final dispatch
    const onFinish = (values) => {
        console.log('Received values of form: ', values);
        const dispatchData = {
            ...values,
            targetValue: targetType === 'all' ? null : values.targetValue,
            scheduledTime: dispatchTime === 'scheduled' ? values.scheduledTime?.format('YYYY-MM-DD HH:mm:ss') : null,
        };
        // Remove unnecessary fields
        delete dispatchData.scheduledTimeOption;
        if (dispatchTime === 'immediate') delete dispatchData.scheduledTime;
        if (targetType === 'all') delete dispatchData.targetValue;

        message.loading({ content: 'ÏïåÎ¶º Î∞úÏÜ° Ï≤òÎ¶¨ Ï§ë...', key: 'dispatch' });
        // TODO: Implement actual API call here
        console.log('Dispatching notification:', dispatchData);
        setTimeout(() => { // Simulate API delay
            message.success({ content: 'ÏïåÎ¶º Î∞úÏÜ° ÏöîÏ≤≠Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', key: 'dispatch', duration: 2 });
            // Optionally reset form
            // form.resetFields();
            // setTargetType('all');
            // setDispatchTime('immediate');
        }, 1500);
    };

    const onFinishFailed = (errorInfo) => {
        console.log('Failed:', errorInfo);
        message.error('Ìèº ÏûÖÎ†• ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
    };

    return (
        <Space direction="vertical" size="large" style={{ display: 'flex' }}>
            <Title level={2}>ÏïåÎ¶º Î∞úÏÜ°</Title>
            <Card title="ÏïåÎ¶º ÎÇ¥Ïö© ÏûëÏÑ±"> {/* Grouping content in a Card */}
                <Form
                    form={form}
                    layout="vertical"
                    name="notification_dispatch_form"
                    onFinish={onFinish}
                    onFinishFailed={onFinishFailed}
                    initialValues={{
                        channel: 'push', // Default channel
                        targetType: 'all',
                        scheduledTimeOption: 'immediate',
                    }}
                >
                    <Row gutter={16}> {/* Use Grid for layout */}
                        <Col xs={24} sm={12} md={8}>
                            <Form.Item
                                name="channel"
                                label="ÏïåÎ¶º Ï±ÑÎÑê"
                                rules={[{ required: true, message: 'ÏïåÎ¶º Ï±ÑÎÑêÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!' }]}
                            >
                                <Select placeholder="Ï±ÑÎÑê ÏÑ†ÌÉù">
                                    <Option value="push"><BellOutlined /> Ïï± Ìë∏Ïãú</Option>
                                    <Option value="email"><MailOutlined /> Ïù¥Î©îÏùº</Option>
                                    <Option value="sms"><MessageOutlined /> SMS</Option>
                                    {/* Add more channels */} 
                                </Select>
                            </Form.Item>
                        </Col>
                        <Col xs={24} sm={12} md={16}>
                             <Form.Item label="ÌÖúÌîåÎ¶ø ÏÇ¨Ïö© (ÏÑ†ÌÉù ÏÇ¨Ìï≠)">
                                <Select
                                     placeholder="ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù Ïãú Ï†úÎ™©Í≥º ÎÇ¥Ïö© ÏûêÎèô ÏûÖÎ†•"
                                     allowClear
                                     onChange={handleTemplateChange}
                                >
                                     {mockTemplates.map(tpl => (
                                        <Option key={tpl.key} value={tpl.id}>{tpl.name}</Option>
                                     ))}
                                </Select>
                            </Form.Item>
                        </Col>
                    </Row>

                    <Form.Item
                        name="title"
                        label="ÏïåÎ¶º Ï†úÎ™©"
                        rules={[{ required: true, message: 'ÏïåÎ¶º Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!' }]}
                    >
                        <Input placeholder="ÏïåÎ¶º Ï†úÎ™© ÏûÖÎ†• (Ïòà: ÌäπÎ≥Ñ Ìï†Ïù∏ Ïù¥Î≤§Ìä∏ ÏïàÎÇ¥)" />
                    </Form.Item>

                    <Form.Item
                        name="content"
                        label="ÏïåÎ¶º ÎÇ¥Ïö©"
                        rules={[{ required: true, message: 'ÏïåÎ¶º ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!' }]}
                        tooltip="ÌÖúÌîåÎ¶ø Î≥ÄÏàò ÏÇ¨Ïö© Í∞ÄÎä•: [Ïù¥Î¶Ñ], [ÎßÅÌÅ¨] Îì±"
                    >
                        <TextArea rows={6} placeholder="ÏïåÎ¶º ÎÇ¥Ïö© ÏûÖÎ†• (Ïòà: [Ïù¥Î¶Ñ]ÎãòÎßåÏùÑ ÏúÑÌïú ÌäπÎ≥Ñ Ìï†Ïù∏ Ïø†Ìè∞Ïù¥ Î∞úÍ∏âÎêòÏóàÏñ¥Ïöî! ÏßÄÍ∏à ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî. [ÎßÅÌÅ¨])" />
                    </Form.Item>

                    <Divider>Î∞úÏÜ° ÎåÄÏÉÅ Î∞è ÏãúÏ†ê</Divider>

                    <Form.Item name="targetType" label="Î∞úÏÜ° ÎåÄÏÉÅ">
                        <Radio.Group onChange={(e) => setTargetType(e.target.value)} value={targetType}>
                            <Radio value="all">Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê</Radio>
                            <Radio value="group">ÌäπÏ†ï Í∑∏Î£π</Radio>
                            <Radio value="individual">ÌäπÏ†ï ÏÇ¨Ïö©Ïûê</Radio>
                        </Radio.Group>
                    </Form.Item>

                    {targetType === 'group' && (
                        <Form.Item
                            name="targetValue"
                            label="ÎåÄÏÉÅ Í∑∏Î£π ÏÑ†ÌÉù"
                            rules={[{ required: true, message: 'ÎåÄÏÉÅ Í∑∏Î£πÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!' }]}
                        >
                            <Select placeholder="Î∞úÏÜ°Ìï† ÏÇ¨Ïö©Ïûê Í∑∏Î£π ÏÑ†ÌÉù">
                                {mockUserGroups.map(group => (
                                    <Option key={group.key} value={group.key}>{group.name}</Option>
                                ))}
                            </Select>
                        </Form.Item>
                    )}

                    {targetType === 'individual' && (
                        <Form.Item
                            name="targetValue"
                            label="ÎåÄÏÉÅ ÏÇ¨Ïö©Ïûê Í≤ÄÏÉâ"
                            rules={[{ required: true, message: 'ÎåÄÏÉÅ ÏÇ¨Ïö©ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!' }]}
                            tooltip="ÏïÑÏù¥Îîî ÎòêÎäî Ïù¥Î¶ÑÏúºÎ°ú Í≤ÄÏÉâ"
                        >
                            <AutoComplete
                                options={userSearchOptions}
                                onSearch={handleUserSearch}
                                placeholder="ÏÇ¨Ïö©Ïûê ID ÎòêÎäî Ïù¥Î¶Ñ Í≤ÄÏÉâ ÌõÑ ÏÑ†ÌÉù (Ïòà: user001)"
                             >
                                 <Input />{/* Allows manual input if needed */}
                            </AutoComplete>
                        </Form.Item>
                    )}

                    <Form.Item name="scheduledTimeOption" label="Î∞úÏÜ° ÏãúÏ†ê">
                        <Radio.Group onChange={(e) => setDispatchTime(e.target.value)} value={dispatchTime}>
                            <Radio value="immediate">Ï¶âÏãú Î∞úÏÜ°</Radio>
                            <Radio value="scheduled">ÏòàÏïΩ Î∞úÏÜ°</Radio>
                        </Radio.Group>
                    </Form.Item>

                    {dispatchTime === 'scheduled' && (
                        <Form.Item
                            name="scheduledTime"
                            label="ÏòàÏïΩ ÏãúÍ∞Ñ"
                            rules={[{ required: true, message: 'ÏòàÏïΩ Î∞úÏÜ° ÏãúÍ∞ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!' }]}
                        >
                            <DatePicker showTime format="YYYY-MM-DD HH:mm:ss" />
                        </Form.Item>
                    )}

                    <Divider />

                    <Form.Item>
                        <Space size="middle">
                            <Button type="dashed" icon={<EyeOutlined />} onClick={showPreview}>
                                ÎØ∏Î¶¨Î≥¥Í∏∞
                            </Button>
                            <Button type="primary" htmlType="submit" icon={<SendOutlined />}>
                                ÏïåÎ¶º Î∞úÏÜ°
                            </Button>
                        </Space>
                    </Form.Item>
                </Form>
            </Card>

             {/* Preview Modal (Simple Text Preview) */}
            <Modal
                title="ÏïåÎ¶º ÎØ∏Î¶¨Î≥¥Í∏∞"
                open={previewVisible}
                onCancel={() => setPreviewVisible(false)}
                footer={[
                    <Button key="back" onClick={() => setPreviewVisible(false)}>
                        Îã´Í∏∞
                    </Button>,
                ]}
            >
                 <Paragraph><strong>Ï±ÑÎÑê:</strong> {previewData.channel}</Paragraph>
                 <Paragraph><strong>ÎåÄÏÉÅ:</strong> {
                     previewData.targetType === 'all' ? 'Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê' :
                     previewData.targetType === 'group' ? `Í∑∏Î£π (${mockUserGroups.find(g=>g.key === previewData.targetValue)?.name || previewData.targetValue})` :
                     `ÏÇ¨Ïö©Ïûê (${previewData.targetValue})`
                 }</Paragraph>
                 <Paragraph><strong>Î∞úÏÜ° ÏãúÏ†ê:</strong> {
                     previewData.scheduledTimeOption === 'immediate' ? 'Ï¶âÏãú' :
                     previewData.scheduledTime ? moment(previewData.scheduledTime).format('YYYY-MM-DD HH:mm:ss') : '-'
                 }</Paragraph>
                <Divider />
                <Paragraph><strong>Ï†úÎ™©:</strong> {previewData.title}</Paragraph>
                <Paragraph><strong>ÎÇ¥Ïö©:</strong></Paragraph>
                <Paragraph style={{ whiteSpace: 'pre-wrap', background: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>
                    {previewData.content}
                </Paragraph>
            </Modal>
        </Space>
    );
};

export default NotificationDispatch; 